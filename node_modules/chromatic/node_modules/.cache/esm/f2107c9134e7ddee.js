let execa,fs,path,semver,tmp,createTask,transitionTo,buildFailed,initial,pending,skipped,success;_34e‍.x([["setSourceDir",()=>setSourceDir],["setSpawnParams",()=>setSpawnParams],["buildStorybook",()=>buildStorybook],["default",()=>_34e‍.o]]);_34e‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_34e‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_34e‍.w("path",[["default",["path"],function(v){path=v}]]);_34e‍.w("semver",[["default",["semver"],function(v){semver=v}]]);_34e‍.w("tmp-promise",[["default",["tmp"],function(v){tmp=v}]]);_34e‍.w("../lib/tasks",[["createTask",["createTask"],function(v){createTask=v}],["transitionTo",["transitionTo"],function(v){transitionTo=v}]]);_34e‍.w("../ui/messages/errors/buildFailed",[["default",["buildFailed"],function(v){buildFailed=v}]]);_34e‍.w("../ui/tasks/build",[["initial",["initial"],function(v){initial=v}],["pending",["pending"],function(v){pending=v}],["skipped",["skipped"],function(v){skipped=v}],["success",["success"],function(v){success=v}]]);









       const setSourceDir = async ctx => {
  if (ctx.options.outputDir) {
    ctx.sourceDir = ctx.options.outputDir;
  } else if (semver.lt(ctx.storybook.version, '5.0.0')) {
    // Storybook v4 doesn't support absolute paths like tmp.dir would yield
    ctx.sourceDir = 'storybook-static';
  } else {
    const tmpDir = await tmp.dir({ unsafeCleanup: true, prefix: `chromatic-` });
    ctx.sourceDir = tmpDir.path;
  }
};

       const setSpawnParams = ctx => {
  // Run either:
  //   npm/yarn run scriptName (depending on npm_execpath)
  //   node path/to/npm.js run scriptName (if npm run via node)
  // Based on https://github.com/mysticatea/npm-run-all/blob/52eaf86242ba408dedd015f53ca7ca368f25a026/lib/run-task.js#L156-L174
  const npmExecPath = process.env.npm_execpath;
  const isJsPath = typeof npmExecPath === 'string' && /\.m?js/.test(path.extname(npmExecPath));
  const isYarn = npmExecPath && path.basename(npmExecPath) === 'yarn.js';
  ctx.spawnParams = {
    command: isJsPath ? process.execPath : npmExecPath || 'npm',
    clientArgs: [isJsPath ? npmExecPath : '', isYarn ? '' : 'run', '--silent'].filter(Boolean),
    scriptArgs: [
      ctx.options.buildScriptName,
      isYarn ? '' : '--',
      '--output-dir',
      ctx.sourceDir,
    ].filter(Boolean),
  };
};

       const buildStorybook = async ctx => {
  ctx.buildLogFile = path.resolve('./build-storybook.log');
  const logFile = fs.createWriteStream(ctx.buildLogFile);
  await new Promise((resolve, reject) => {
    logFile.on('open', resolve);
    logFile.on('error', reject);
  });

  try {
    const { command, clientArgs, scriptArgs } = ctx.spawnParams;
    await execa(command, [...clientArgs, ...scriptArgs], { stdio: [null, logFile, logFile] });
  } catch (e) {
    e.message = buildFailed(ctx, e);
    throw e;
  } finally {
    logFile.end();
  }
};

_34e‍.d(createTask({
  title: initial.title,
  skip: async ctx => {
    if (ctx.skip) return true;
    if (ctx.options.storybookBuildDir) {
      ctx.sourceDir = ctx.options.storybookBuildDir;
      return skipped(ctx).output;
    }
    return false;
  },
  steps: [
    setSourceDir,
    setSpawnParams,
    transitionTo(pending),
    buildStorybook,
    transitionTo(success, true),
  ],
}));
