let gte,treeKill,startApp,checkResponse,createTask,transitionTo,initial,pending,skipFailed,skipped,success;_34e‍.x([["startStorybook",()=>startStorybook],["default",()=>_34e‍.o]]);_34e‍.w("semver",[["gte",["gte"],function(v){gte=v}]]);_34e‍.w("tree-kill",[["default",["treeKill"],function(v){treeKill=v}]]);_34e‍.w("../lib/startStorybook",[["default",["startApp"],function(v){startApp=v}],["checkResponse",["checkResponse"],function(v){checkResponse=v}]]);_34e‍.w("../lib/tasks",[["createTask",["createTask"],function(v){createTask=v}],["transitionTo",["transitionTo"],function(v){transitionTo=v}]]);_34e‍.w("../ui/tasks/start",[["initial",["initial"],function(v){initial=v}],["pending",["pending"],function(v){pending=v}],["skipFailed",["skipFailed"],function(v){skipFailed=v}],["skipped",["skipped"],function(v){skipped=v}],["success",["success"],function(v){success=v}]]);






       const startStorybook = async ctx => {
  const { exec: commandName, scriptName, url } = ctx.options;

  const child = await startApp({
    scriptName,
    commandName,
    url,
    args: scriptName &&
      ctx.storybook.version &&
      gte(ctx.storybook.version, ctx.env.STORYBOOK_CLI_FLAGS_BY_VERSION['--ci']) && ['--', '--ci'],
    options: { stdio: 'pipe' },
    env: ctx.env,
  });

  ctx.isolatorUrl = url;
  ctx.stopApp = () =>
    child &&
    new Promise((resolve, reject) =>
      treeKill(child.pid, 'SIGHUP', err => (err ? reject(err) : resolve()))
    );
};

_34e‍.d(createTask({
  title: initial.title,
  skip: async ctx => {
    if (ctx.skip) return true;
    if (await checkResponse(ctx.options.url)) {
      ctx.isolatorUrl = ctx.options.url;
      return skipped(ctx).output;
    }
    if (ctx.options.noStart) {
      throw new Error(skipFailed(ctx).output);
    }
    return false;
  },
  steps: [transitionTo(pending), startStorybook, transitionTo(success, true)],
}));
