let picomatch,getCommitAndBranch,getBaselineCommits,getVersion,createTask,transitionTo,initial,pending,skipFailed,skippedForCommit,skippingBuild,success;_34e‍.x([["setGitInfo",()=>setGitInfo],["default",()=>_34e‍.o]]);_34e‍.w("picomatch",[["default",["picomatch"],function(v){picomatch=v}]]);_34e‍.w("../git/getCommitAndBranch",[["getCommitAndBranch",["getCommitAndBranch"],function(v){getCommitAndBranch=v}]]);_34e‍.w("../git/git",[["getBaselineCommits",["getBaselineCommits"],function(v){getBaselineCommits=v}],["getVersion",["getVersion"],function(v){getVersion=v}]]);_34e‍.w("../lib/tasks",[["createTask",["createTask"],function(v){createTask=v}],["transitionTo",["transitionTo"],function(v){transitionTo=v}]]);_34e‍.w("../ui/tasks/gitInfo",[["initial",["initial"],function(v){initial=v}],["pending",["pending"],function(v){pending=v}],["skipFailed",["skipFailed"],function(v){skipFailed=v}],["skippedForCommit",["skippedForCommit"],function(v){skippedForCommit=v}],["skippingBuild",["skippingBuild"],function(v){skippingBuild=v}],["success",["success"],function(v){success=v}]]);













const TesterSkipBuildMutation = `
  mutation TesterSkipBuildMutation($commit: String!) {
    skipBuild(commit: $commit)
  }
`;

       const setGitInfo = async (ctx, task) => {
  const { patchBaseRef, fromCI, ignoreLastBuildOnBranch, skip } = ctx.options;

  ctx.git = await getCommitAndBranch({ patchBaseRef, inputFromCI: fromCI, log: ctx.log });
  ctx.git.version = await getVersion();
  const { branch, commit } = ctx.git;

  const matchesBranch = glob => (glob && glob.length ? picomatch(glob)(branch) : !!glob);
  ctx.git.matchesBranch = matchesBranch;

  if (matchesBranch(skip)) {
    transitionTo(skippingBuild)(ctx, task);
    if (await ctx.client.runQuery(TesterSkipBuildMutation, { commit })) {
      ctx.skip = true;
      return transitionTo(skippedForCommit, true)(ctx, task);
    }
    throw new Error(skipFailed(ctx).output);
  }

  const baselineCommits = await getBaselineCommits(ctx, {
    branch,
    ignoreLastBuildOnBranch: matchesBranch(ignoreLastBuildOnBranch),
  });
  ctx.git.baselineCommits = baselineCommits;
  ctx.log.debug(`Found baselineCommits: ${baselineCommits}`);

  return transitionTo(success, true)(ctx, task);
};

_34e‍.d(createTask({
  title: initial.title,
  steps: [transitionTo(pending), setGitInfo],
}));
